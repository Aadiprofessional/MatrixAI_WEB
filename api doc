Guest user checkout
This page describes how to redirect to a payment page hosted by Airwallex to accept payments.

How it works
The diagram below depicts the information flow in a Hosted Payment Page integration.
HPP Sequence

Before you begin
Before you implement the integration, consider the following:

Ensure your Airwallex account has been activated for online payments.

Obtain your access token  by authenticating to Airwallex using your unique Client ID and API key. You will need the access token to make API calls.

Review the Hosted Payment Page  to familiarize yourself with the Hosted Payment Page methods, parameters, and properties.

Install Airwallex.js . If your integration currently uses Airwallex Payment Elements , refer to our upgrade guide for information on migrating to Airwallex.js.

Step 1: Set up the server to create a PaymentIntent
When the shopper begins the checkout process, you will need to create a PaymentIntent object to indicate your intent to collect payment from the shopper.

When the checkout page loads, on your server, call Create a PaymentIntent  with an amount and currency. Always decide how much to charge on the server side, a trusted environment, as opposed to the client. This prevents malicious shoppers from being able to alter the payment amount.

Provide return_url in Create a PaymentIntent  if you want to offer alternative payment methods (Alipay, Dana, KakaoPay, etc) that redirect shoppers to a partner site. The shopper will be returned to the return_url after the payment is complete, whether successful or otherwise.

The PaymentIntent’s id and client_secret are returned in the response — these parameters let you confirm the payment and update card details on the client, without allowing manipulation of sensitive information, like payment amount.

To display order information on the Hosted Payment Page, provide the order object with the product information when you call Create a PaymentIntent .

Shell

$
curl --request POST \
>
--url 'https://api-demo.airwallex.com/api/v1/pa/payment_intents/create' \
>
--header 'Content-Type: application/json' \
>
--header 'Authorization: Bearer <your_bearer_token>' \
>
--data-raw '{
>
    "request_id": "00e8df19-7087-4209-b50b-067d6a39ee72",
>
    "amount": 100,
>
    "currency": "CNY",
>
    "merchant_order_id": "Merchant_Order_a7f9baf8-884a-4def-ba85-d1f9be83470a",   
>
    "return_url": "http://www.merchant.com/result"
>
}' 
Step 2: Initialize Airwallex on your checkout page
First, you will need to import Airwallex.js and then initialize the package. For details, see Initialize Airwallex .

Step 3: Add the redirect button to your checkout page
To redirect your shopper to the Hosted Payment Page, you will need a checkout button and a button handler to trigger the redirect.

Add the checkout button
HTML

1
<button id="hpp">Checkout</button>
Add the button handler
Provide the intent_id, client_secret, and country_code retrieved from Step 1, and the currency for the payment in the redirectToCheckout() method.

JavaScript

1
import { init } from '@airwallex/components-sdk';
2
​
3
const payment = await init({
4
  env: 'demo',
5
  enabledElements: ['payments'],
6
});
7
​
8
payment.redirectToCheckout({
9
  intent_id: 'replace-with-your-intent-id',
10
  client_secret: 'replace-with-your-client-secret',
11
  currency: 'replace-with-your-currency',
12
  country_code: 'replace-with-your-country-code',
13
});
When this method is triggered, Airwallex will redirect your shopper to the Hosted Payment Page, display the relevant payment methods on the payment page, collect the shopper’s payment details, and eventually trigger the authentication.

Note that Hosted Payment Page automatically handles 3D Secure authentication, offering either frictionless or challenge flow depending on the card issuer’s requirements. For more information, see 3D Secure authentication.

You can also customize the Hosted Payment Page by providing options  in the redirectToCheckout() method.

Step 4: Retrieve the payment result
Upon completing the payment, your shopper will be redirected to one of these URLs successUrl or failUrl provided in redirectToCheckout() method, and the PaymentIntent id will be appended to the URL.

HTML

1
https://your-website-host/your-success-path?id=int_xxxxx
For any actions subsequent to the payment such as shipping goods or sending email receipts, you can retrieve the payment result using the following options:

Set up webhooks to receive notifications on whether the payment has succeeded. Airwallex sends payment_intent.succeeded event when a payment succeeds. Listen to these events rather than waiting on a callback from the client. On the client, the shopper could close the browser window or quit the app before the callback executes. For information on how to set up webhooks and listen to events, see Getting started with webhooks

On your server, call Retrieve a PaymentIntent  to check the PaymentIntent status.

Check Payment Activity screen on your Airwallex web app.

Test your integration
Use test card numbers and the test and go-live checklist to test your integration for various success and error scenarios in the sandbox environment and then go live in the production environment.

Example integrations
Explore a full, working code sample of an integration built using various web frameworks .

Troubleshooting
Some common error scenarios include :

Error	Next steps
Airwallex is not defined	Check if you have initialized Airwallex (Step 2) before using Airwallex functions. If you are using CDN, check if you have changed the bundle version from x.x.x to the latest version in the package.json file. For example, https://checkout.airwallex.com/assets/elements.bundle.min.js is invalid
Access denied, authentication failed	Check if you have replaced your intent id and client_secret in createElement() and optionally confirm().
The PaymentIntent with ID int_xxxxxxxxx cannot be found	Check if the environment you initialized Airwallex in, for example, demo or prod, matches the environment you retrieved your intent id and client_secret from. In other words, if you ran init in the demo environment, you must also create your PaymentIntent in the demo environment.
Introduction
Welcome to Airwallex.

The Airwallex API is based on REST principles, offering a predictable and flexible integration experience for developers embedding financial flows into their applications.

The API suite offers a diverse range of products, including global business accounts, payments acceptance, spend management, and much more — all accessible on a single, unified API platform. Sandbox accounts are available for testing integrations in a secure environment without live data before deploying to production. For more details, see Sandbox environment overview.

API endpoints	Environment
https://api-demo.airwallex.com/api/v1/	Sandbox
https://api.airwallex.com/api/v1/	Production
Getting Started
An example workflow is set out below for guidance on how the Airwallex API operates in practice.

In this example, we want to make a HKD$10,000 transfer in HKD to a beneficiary in HK, funded by an available account balance in USD.

1. Authentication
To begin you will need to obtain an access token to allow you to reach all other API endpoints. Using your unique Client ID and API key (these can be found in the API menu in the Airwallex Web Application) you can call the Authentication API endpoint. On success, an access token will be granted.

Shell
JavaScript
Python
C#
Java
Example authentication request
$
curl --request POST \
>
--url 'https://api-demo.airwallex.com/api/v1/authentication/login' \
>
--header 'Content-Type: application/json' \
>
--header 'x-client-id: W_ORsgAFTiuA9k2KuqZt8A' \
>
--header 'x-api-key: 8ac97c856c6d6cae7eb8fd05511f7a165be798d032381cb8026de7b4aa9aaee2e6312a8888a3474d783a40913ab6b55d'
>
​
Example authentication response
$
{
>
  "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0b20iLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTQ4ODQxNTI1NywiZXhwIjoxNDg4NDE1MjY3fQ.UHqau03y5kEk5lFbTp7J4a-U6LXsfxIVNEsux85hj-Q"
>
}
2. Get Balances
Before conducting a transaction, you may wish to query any balances you have available in your Airwallex account.

Shell
JavaScript
Python
C#
Java
Example balances request
$
curl --request GET \
>
--url 'https://api-demo.airwallex.com/api/v1/balances/current' \
>
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0b20iLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTQ4ODQxNTI1NywiZXhwIjoxNDg4NDE1MjY3fQ.UHqau03y5kEk5lFbTp7J4a-U6LXsfxIVNEsux85hj-Q'
>
​
Example balances response
$
[
>
  {
>
    "available_amount": 100000,
>
    "currency": "USD",
>
    "pending_amount": 50000,
>
    "total_amount": 150000
>
  },
>
  {
>
    "available_amount": 0,
>
    "currency": "HKD",
>
    "pending_amount": 0,
>
    "total_amount": 0
>
  }
>
]
3. Get Quote
The Quote API will return a guaranteed rate for the currency pair you are looking to transact in.

A rate will return both the indicative rate and the amount of the prospective transaction.

A Quote will return a guaranteed rate for an agreed period of time.

Shell
JavaScript
Python
C#
Java
Example quote request
$
curl --request POST \
>
--url 'https://api-demo.airwallex.com/api/v1/fx/quotes/create' \
>
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0b20iLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTQ4ODQxNTI1NywiZXhwIjoxNDg4NDE1MjY3fQ.UHqau03y5kEk5lFbTp7J4a-U6LXsfxIVNEsux85hj-Q' \
>
--header 'Content-Type: application/json' \
>
--data '{
>
  "buy_amount": 10000,
>
  "buy_currency": "AUD",
>
  "conversion_date": "2017-04-01",
>
  "sell_amount": 100,
>
  "sell_currency": "USD",
>
  "validity": "HR_24"
>
}'
>
​
Example quote response
$
{
>
  "awx_rate": 0.7622,
>
  "buy_amount": 10000,
>
  "buy_currency": "AUD",
>
  "client_rate": 0.7632,
>
  "conversion_date": "2017-04-01",
>
  "currency_pair": "AUDUSD",
>
  "dealt_currency": "AUD",
>
  "mid_rate": 0.7612,
>
  "quote_id": "a08c0f2f-3f26-4443-b5df-fad15582eb94",
>
  "rate_details": [
>
    {
>
      "buy_amount": 10000,
>
      "level": "CLIENT",
>
      "rate": 0.781523,
>
      "sell_amount": 12794.27
>
    }
>
  ],
>
  "sell_amount": 7632,
>
  "sell_currency": "USD",
>
  "usage": "SINGLE_USE",
>
  "valid_from_at": "2019-05-03T02:49:05+0000",
>
  "valid_to_at": "2019-05-04T02:49:05+0000",
>
  "validity": "HR_24"
>
}
4. Create Transfer
When creating a transfer, you can have the FX transaction booked automatically and linked to the transfer by specifying a different target currency (in this case HKD) to the source currency (USD in this example). The response will return all requisite details on the transaction, including the amount due to Airwallex for settlement and the cut-off date and time that those funds must be delivered to Airwallex in cleared funds.

Shell
JavaScript
Python
C#
Java
Example transfer request
$
curl --request POST \
>
--url 'https://api-demo.airwallex.com/api/v1/transfers/create' \
>
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0b20iLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTQ4ODQxNTI1NywiZXhwIjoxNDg4NDE1MjY3fQ.UHqau03y5kEk5lFbTp7J4a-U6LXsfxIVNEsux85hj-Q' \
>
--header 'Content-Type: application/json' \
>
--data '{
>
  "beneficiary": {
>
    "additional_info": {
>
      "personal_email": "john.walker@gmail.com"
>
    },
>
    "address": {
>
      "city": "Seattle",
>
      "country_code": "US",
>
      "postcode": "98104",
>
      "state": "Washington",
>
      "street_address": "412 5th Avenue"
>
    },
>
    "bank_details": {
>
      "account_currency": "USD",
>
      "account_name": "John Walker",
>
      "account_number": "50001121",
>
      "account_routing_type1": "aba",
>
      "account_routing_value1": "",
>
      "bank_country_code": "US",
>
      "local_clearing_system": "ACH"
>
    },
>
    "company_name": "Complete Concrete Pty Ltd",
>
    "entity_type": "COMPANY"
>
  },
>
  "metadata": {
>
    "order_id": "0123456789"
Example transfer response
$
{
>
  "amount_beneficiary_receives": 99996,
>
  "amount_payer_pays": 10004,
>
  "batch_transfer_id": "d9df6d02-4116-4376-82c7-064159cc878e",
>
  "beneficiary": {
>
    "additional_info": {
>
      "business_area": "Travel",
>
      "business_phone_number": "689342234",
>
      "business_registration_number": "IT593003",
>
      "legal_rep_bank_account_number": "44250100003700000000",
>
      "legal_rep_first_name_in_chinese": "小芳",
>
      "legal_rep_id_number": "110108199304203520",
>
      "legal_rep_last_name_in_chinese": "刘",
>
      "legal_rep_mobile_number": "13651362890",
>
      "personal_email": "john.walker@gmail.com",
>
      "personal_first_name_in_chinese": "大明",
>
      "personal_id_number": "1234567890",
>
      "personal_id_type": "CHINESE_NATIONAL_ID",
>
      "personal_last_name_in_chinese": "李",
>
      "personal_mobile_number": "13651362890"
>
    },
>
    "address": {
>
      "city": "Melbourne",
>
      "country_code": "AU",
>
      "postcode": "3000",
>
      "state": "VIC",
>
      "street_address": "15 William Street"
>
    },
>
    "bank_details": {
>
      "account_currency": "AUD",
5. Check Transfer Status
Following a successful transfer creation, updates on the status of the transfer can be returned from Get transfer by ID.

Shell
JavaScript
Python
C#
Java
Example transfer details request
$
curl --request GET \
>
--url 'https://api-demo.airwallex.com/api/v1/transfers/6f63544d-afec-40a7-ad3a-22fa6639bca6' \
>
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0b20iLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTQ4ODQxNTI1NywiZXhwIjoxNDg4NDE1MjY3fQ.UHqau03y5kEk5lFbTp7J4a-U6LXsfxIVNEsux85hj-Q'
>
​
Example transfer details response
$
{
>
  "amount_beneficiary_receives": 99996,
>
  "amount_payer_pays": 10004,
>
  "batch_transfer_id": "d9df6d02-4116-4376-82c7-064159cc878e",
>
  "beneficiary": {
>
    "additional_info": {
>
      "business_area": "Travel",
>
      "business_phone_number": "689342234",
>
      "business_registration_number": "IT593003",
>
      "legal_rep_bank_account_number": "44250100003700000000",
>
      "legal_rep_first_name_in_chinese": "小芳",
>
      "legal_rep_id_number": "110108199304203520",
>
      "legal_rep_last_name_in_chinese": "刘",
>
      "legal_rep_mobile_number": "13651362890",
>
      "personal_email": "john.walker@gmail.com",
>
      "personal_first_name_in_chinese": "大明",
>
      "personal_id_number": "1234567890",
>
      "personal_id_type": "CHINESE_NATIONAL_ID",
>
      "personal_last_name_in_chinese": "李",
>
      "personal_mobile_number": "13651362890"
>
    },
>
    "address": {
>
      "city": "Melbourne",
>
      "country_code": "AU",
>
      "postcode": "3000",
>
      "state": "VIC",
>
      "street_address": "15 William Street"
>
    },
>
    "bank_details": {
>
      "account_currency": "AUD",
6. Create a card
You can create virtual cards associated with your organisation, these cards can be single or multi-usage and be restricted by merchant code, currency and transaction amount. Following a card being created you can access secure Card information via our PCI compliance endpoint.

Shell
JavaScript
Python
C#
Java
Example create card request
$
curl --request POST \
>
--url 'https://api-demo.airwallex.com/api/v1/issuing/cards/create' \
>
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0b20iLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTQ4ODQxNTI1NywiZXhwIjoxNDg4NDE1MjY3fQ.UHqau03y5kEk5lFbTp7J4a-U6LXsfxIVNEsux85hj-Q' \
>
--header 'Content-Type: application/json' \
>
--data '{
>
  "authorization_controls": {
>
    "allowed_merchant_categories": 7531,
>
    "allowed_transaction_count": "SINGLE",
>
    "per_transaction_limits": [
>
      {
>
        "currency": "USD",
>
        "limit": 1500,
>
        "unlimited": true
>
      }
>
    ]
>
  },
>
  "client_data": "20190817_dfelsflkj73494lksdfg9480ww",
>
  "created_by": "John Smith",
>
  "form_factor": "VIRTUAL",
>
  "issue_to": "ORGANISATION",
>
  "name_on_card": "John Smith",
>
  "note": "This is my first card.",
>
  "primary_contact_details": {
>
    "date_of_birth": "1945-07-12",
>
    "full_name": "John Smith",
>
    "mobile_number": "619922334321"
>
  },
>
  "request_id": "7f687fe6-dcf4-4462-92fa-80335301d9d2"
>
}'
>
​
Example create card response
$
{
>
  "amount_beneficiary_receives": 10000,
>
  "amount_payer_pays": 1287.22,
>
  "beneficiary": {
>
    "additional_info": {
>
      "business_area": "Travel"
>
    },
>
    "address": {
>
      "city": "Hong Kong",
>
      "country_code": "HK",
>
      "postcode": "999077",
>
      "state": "Hong Kong",
>
      "street_address": "38 Chengtu Rd"
>
    },
>
    "bank_details": {
>
      "account_currency": "HKD",
>
      "account_name": "John Walker",
>
      "account_number": "786005728434",
>
      "account_routing_type1": "bank_code",
>
      "account_routing_value1": "024",
>
      "bank_country_code": "HK",
>
      "bank_name": "Hang Seng Bank Limited"
>
    },
>
    "date_of_birth": "1976-08-26",
>
    "entity_type": "PERSONAL",
>
    "first_name": "John",
>
    "last_name": "Walker"
>
  },
>
  "created_at": "2018-03-21T01:16:21+0000",
>
  "fee_amount": 3.57,
Was this section helpful?

Yes

No
Data Types
This section describes the data types and formats used consistently in the API.

DATA TYPES
Dates
Dates (without time/timezone information) in YYYY-MM-DD format. Sample use cases: conversion_date, payment_date

Timestamps
Date and time with timezone information in YYYY-MM-DDTHH:mm:ssZ format. Sample use cases: settlement_cutoff_time, created_at, last_updated_at

Country Codes
Two-letter ISO 3166-2 country code.

Currency Codes
Three-letter ISO 4217 currency code.

Hosted Payment Page
The Hosted Payment Page integration allows you to redirect your shoppers to a secure, pre-built payment page hosted by Airwallex where the shopper can submit payment details to make a payment.
redirectToCheckout(props)
Function to redirect the shopper in a Hosted Payment Page(HPP) integration.

Parameters
props
required
HostPaymentPage

Returns
string | void
linkTypeScript
import { init } from '@airwallex/components-sdk';

const { payments } = await init({
  env: 'demo', // Choose the Airwallex environment ('demo' or 'prod')
  enabledElements: ['payments'],
});
payments.redirectToCheckout({
  intent_id: 'replace-with-your-intent-id',
  client_secret: 'replace-with-your-client-secret',
  currency: 'replace-with-your-currency',
  country_code: 'replace-with-your-country-code',
});
HostedPaymentPageOptions
Configuration option for Hosted Payment Page(HPP), a checkout solution that redirects shoppers to a secure, pre-built payment page hosted by Airwallex.

client_secret
required
string
The client_secret of the Payment Intent when Payment Intent is provided. Otherwise, this should be the client_secret of the Customer object.

currency
required
string
The three-letter ISO currency code representing the currency of the Payment Intent or Payment Consent. Only payment methods supported for the specified currency will be shown on the payment page.

allowedCardNetworks
optional
CardNetwork[]
One or more card networks that you support.

appearance
optional
Appearance
Page appearance customization options for Hosted Payment Page.

You can configure:

mode: Choose between 'dark' and 'light' mode.

variables: Set colorBrand, colorText, colorBackground properties.


applePayRequestOptions
optional
ApplePayRequestOptions
Checkout configuration options for Apple Pay.

authorizationType
optional
AuthorizationType
The authorization type for the card payment. Set it to 'pre_auth' if you want to place a hold on your customer’s card for more than 7 days, i.e., extend the authorization time window. Currently 'pre_auth' is only available when the card brand is Visa or Mastercard. autoCapture will be automatically set to false if you enable 'pre_auth'. Default value is 'final_auth'.

autoCapture
optional
boolean
Whether the amount should be captured automatically upon successful payment authorization. Set it to false if you want to place a hold on the payment method and capture the funds sometime later. Default value is true.

autoSaveCardForFuturePayments
optional
boolean
Specifies whether the card payment method should be automatically saved for future transactions.

This parameter is only effective in payment mode when a customer_id is provided.

If set to true, the "Save my card for future payments" checkbox will be preselected by default. - If set to false, the checkbox will remain unchecked, requiring the shopper to manually opt in.
Default value is true

country_code
optional
string
The two-letter ISO country code of the shopper's country. If the country_code is not provided, we will determine it based on the shopper's IP address. However, some payment methods, such as iDEAL, are only available to shoppers in specific countries. If the shopper is not located in a supported country, the corresponding payment method may not be displayed. To ensure that your customers can successfully complete their payments using the appropriate methods, we strongly recommend that you explicitly pass the country_code to us.

customer_id
optional
string
The ID of the Customer used in registered user checkout. Refer to Airwallex Client APIAPI This field is required when mode is 'recurring'.

cvcRequired
optional
boolean
Whether you require the shopper to provide CVC when they checkout with a network tokenized card.

disableAutoRedirect
optional
boolean
Whether auto redirect to the URL specified by the merchant should be disabled. Default value is false.

env
optional
AirwallexEnv
The Airwallex integration environment your site would like to connect with. Default value is prod.

failUrl
optional
string
The HTPS URL to redirect shoppers when payment fails.

googlePayRequestOptions
optional
GooglePayHppRequestOptions
Checkout configuration options for Google Pay.

intent_id
optional
string
The ID of the Payment Intent you would like to checkout. Required when mode is 'payment'.

layout
optional
HppLayout
The layout of the Hosted Payment Page.

locale
optional
Locale
The locale for your website. Defaults to the browser's locale; however, if the browser's locale is not supported, it will default to 'en'.

logoUrl
optional
string
The URL of your website logo to display on the header of the Hosted Payment Page.

methods
optional
PaymentMethodType[]
Specify the payment methods and their order for display on the payment page. By default, the order will be based on the order configured in Get available payment method types APIAPI, with 'applepay', 'googlepay' and 'paypal' displayed at the top if they're supported. Note: Only payment methods supported for the specified currency and country_code will be shown on the payment page.

mode
optional
Mode
The checkout mode for the shopper. Default value is 'payment'.

payment_consent
optional
PaymentConsentOptions
The payment consent details.

platformConnectedAccount
optional
string
When using Payments for Platforms, specify the ID of the connected account associated with the payment if you want to use its information to process the payment. For example, the statement descriptor displayed on the shopper's credit card or bank statement and the payment methods activated by the connected account.

recurringOptions
optional
RecurringOptions
Options for recurring flow.

requiredBillingContactFields
optional
ContactField[]
The billing information that you require from the user in order to process the transaction.

shopper_email
optional
string
The shopper's email address.

shopper_name
optional
string
The shopper's full name.

shopper_phone
optional
string
The shopper's phone number.

showTermLink
optional
boolean

submitType
optional
SubmitType
Describes the type of transaction being performed in order to customize the submit button text. Available options are 'pay', 'book', 'subscribe', 'save'. If blank, the default value will be 'pay' Default value is 'pay'.

successUrl
optional
string
The HTTPS URL to redirect shoppers when payment is successful.

wechatpay
optional
WeChatPayFlow
The options for WeChat Pay.

components
deprecated
PaymentMethodType[]
The payment methods your website would like to integrate with.

theme
deprecated
HppTheme
use appearance instead

withBilling
deprecated
boolean
Used to increase the likelihood of 3DS frictionless checkout. Set this to true if you want the payment form to collect billing information from the shopper. Only applies to card payment method.

Was this page helpful?

Yes

No