import React, { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import { 
  FiEdit, 
  FiCopy, 
  FiDownload, 
  FiTrash, 
  FiPlus, 
  FiSave,
  FiZap,
  FiList,
  FiBookOpen,
  FiMessageSquare,
  FiFileText,
  FiSliders,
  FiRotateCw,
  FiX
} from 'react-icons/fi';
import { ProFeatureAlert } from '../components';
import { useUser } from '../context/UserContext';

const ContentWriterPage: React.FC = () => {
  const { userData, isPro } = useUser();
  const [prompt, setPrompt] = useState('');
  const [generatedContent, setGeneratedContent] = useState('');
  const [tone, setTone] = useState('professional');
  const [contentType, setContentType] = useState('blog');
  const [contentLength, setContentLength] = useState('medium');
  const [isGenerating, setIsGenerating] = useState(false);
  const [savedContents, setSavedContents] = useState<{id: string, title: string, content: string}[]>([]);
  const [editingTitle, setEditingTitle] = useState('');
  const [showTitleEdit, setShowTitleEdit] = useState(false);
  const [showContentSettings, setShowContentSettings] = useState(false);
  const [showProAlert, setShowProAlert] = useState(false);
  const [freeGenerationsLeft, setFreeGenerationsLeft] = useState(1);
  const [history, setHistory] = useState<string[]>([
    'Write a blog post about sustainable living practices',
    'Create a product description for a new fitness watch',
    'Draft an email announcing a company event',
    'Write a social media post about a new technology launch'
  ]);

  const contentRef = useRef<HTMLTextAreaElement>(null);

  // Content types
  const contentTypes = [
    { id: 'blog', name: 'Blog Post' },
    { id: 'email', name: 'Email' },
    { id: 'social', name: 'Social Media Post' },
    { id: 'product', name: 'Product Description' },
    { id: 'academic', name: 'Academic Paper' },
    { id: 'creative', name: 'Creative Writing' },
    { id: 'press', name: 'Press Release' },
    { id: 'ad', name: 'Advertisement' },
  ];

  // Tone options
  const toneOptions = [
    { id: 'professional', name: 'Professional' },
    { id: 'casual', name: 'Casual' },
    { id: 'formal', name: 'Formal' },
    { id: 'friendly', name: 'Friendly' },
    { id: 'humorous', name: 'Humorous' },
    { id: 'persuasive', name: 'Persuasive' },
    { id: 'enthusiastic', name: 'Enthusiastic' },
    { id: 'instructional', name: 'Instructional' },
  ];

  // Length options
  const lengthOptions = [
    { id: 'short', name: 'Short (100-200 words)' },
    { id: 'medium', name: 'Medium (300-500 words)' },
    { id: 'long', name: 'Long (600-1000 words)' },
    { id: 'detailed', name: 'Detailed (1000+ words)' },
  ];

  const handleGenerateContent = async () => {
    if (!prompt.trim()) return;
    
    // If user is not pro and has used all free generations, show pro alert
    if (!isPro && freeGenerationsLeft <= 0) {
      setShowProAlert(true);
      return;
    }
    
    setIsGenerating(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      // Example result (in a real app, this would come from an API)
      const result = `# ${getContentTitle()}

${getContentBody()}

${getContentConclusion()}`;
      
      setGeneratedContent(result);
      
      // Add to history if not already there
      if (!history.includes(prompt)) {
        setHistory(prev => [prompt, ...prev.slice(0, 3)]);
      }
      
      // Decrease free generations left if user is not pro
      if (!isPro) {
        setFreeGenerationsLeft(prev => prev - 1);
      }
    } catch (error) {
      console.error('Error generating content:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const getContentTitle = () => {
    // This would normally be generated by AI
    const typeLabels: Record<string, string> = {
      'blog': 'Blog Post:',
      'email': 'Email:',
      'social': 'Social Media Post:',
      'product': 'Product Description:',
      'academic': 'Academic Paper:',
      'creative': 'Creative Writing Piece:',
      'press': 'Press Release:',
      'ad': 'Advertisement:'
    };
    
    const typeLabel = typeLabels[contentType] || 'Content';
    
    let title = '';
    if (prompt.length > 30) {
      title = `${typeLabel} ${prompt.substring(0, 30)}...`;
    } else {
      title = `${typeLabel} ${prompt}`;
    }
    
    return title;
  };

  const getContentBody = () => {
    // This would normally be generated by AI
    // Create a placeholder based on content type, tone, and length
    const wordCounts: Record<string, number> = {
      'short': 150,
      'medium': 400,
      'long': 800,
      'detailed': 1200
    };
    
    const wordCount = wordCounts[contentLength] || 400;
    
    // Generate lorem ipsum style content with appropriate word count and paragraphs
    let paragraphs = Math.ceil(wordCount / 100); // One paragraph per 100 words
    paragraphs = Math.max(2, paragraphs); // At least 2 paragraphs
    
    const result = [];
    
    for (let i = 0; i < paragraphs; i++) {
      const paraLength = Math.floor(wordCount / paragraphs);
      let paragraph = '';
      
      // Start paragraph with different openings based on tone
      switch (tone) {
        case 'professional':
          paragraph += "In a professional context, it's important to consider the impact of ";
          break;
        case 'casual':
          paragraph += "Hey there! Let's talk about ";
          break;
        case 'formal':
          paragraph += "It is hereby proposed that the consideration of ";
          break;
        case 'friendly':
          paragraph += "I'm excited to share with you some thoughts on ";
          break;
        case 'humorous':
          paragraph += "You won't believe what happened when I tried to ";
          break;
        case 'persuasive':
          paragraph += "You absolutely need to understand why ";
          break;
        case 'enthusiastic':
          paragraph += "I'm thrilled to announce the amazing ";
          break;
        case 'instructional':
          paragraph += "Follow these steps to master ";
          break;
        default:
          paragraph += "Let's explore the topic of ";
      }
      
      paragraph += prompt.toLowerCase() + ". ";
      
      // Add some filler content
      const fillerText = "This generated content provides valuable insights related to the topic. It covers key aspects and offers meaningful analysis. The content is tailored to meet the specified parameters and help achieve the intended goals.";
      paragraph += fillerText.repeat(Math.ceil((paraLength - 20) / fillerText.length));
      
      result.push(paragraph);
    }
    
    return result.join("\n\n");
  };

  const getContentConclusion = () => {
    // This would normally be generated by AI
    const conclusions: Record<string, string> = {
      'professional': "In conclusion, this analysis provides a foundation for further discussion about " + prompt + ".",
      'casual': "So there you have it! That's my take on " + prompt + ". What do you think?",
      'formal': "Therefore, it is concluded that the aforementioned aspects of " + prompt + " warrant thorough consideration.",
      'friendly': "Thanks for reading my thoughts on " + prompt + ". I'd love to hear your perspective!",
      'humorous': "And that's how I ended up with a story about " + prompt + " that I'll never live down!",
      'persuasive': "Don't wait any longer. The time to act on " + prompt + " is now.",
      'enthusiastic': "I can't wait to see what amazing things will happen with " + prompt + " next!",
      'instructional': "By following these steps, you'll master " + prompt + " in no time.",
    };
    
    return conclusions[tone] || "In summary, these insights about " + prompt + " provide valuable perspective.";
  };

  const handleCopyContent = () => {
    navigator.clipboard.writeText(generatedContent);
    // Could add a toast notification here
  };

  const handleDownloadContent = () => {
    const element = document.createElement('a');
    const file = new Blob([generatedContent], {type: 'text/markdown'});
    element.href = URL.createObjectURL(file);
    element.download = `${getContentTitle()}.md`.replace(/[^a-z0-9\s-]/gi, '').replace(/\s+/g, '-').toLowerCase();
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const handleSaveContent = () => {
    const title = editingTitle || getContentTitle();
    
    setSavedContents(prev => [
      ...prev,
      {
        id: Date.now().toString(),
        title,
        content: generatedContent
      }
    ]);
    
    setShowTitleEdit(false);
    setEditingTitle('');
  };

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setGeneratedContent(e.target.value);
  };

  const handleDeleteSaved = (id: string) => {
    setSavedContents(prev => prev.filter(item => item.id !== id));
  };

  const handleLoadSaved = (content: string) => {
    setGeneratedContent(content);
  };

  return (
    <div className="container mx-auto max-w-6xl p-4 py-8">
      {showProAlert && (
        <ProFeatureAlert 
          featureName="Professional Content Writing"
          onClose={() => setShowProAlert(false)}
        />
      )}
      
      <div className="mb-8">
        <motion.h1 
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-3xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500"
        >
          AI Content Writer
        </motion.h1>
        <motion.p 
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="text-gray-500 dark:text-gray-400"
        >
          Create professional content for blogs, emails, social media, and more
        </motion.p>
        
        {!isPro && (
          <div className="mt-2 flex items-center text-sm text-yellow-600 dark:text-yellow-400">
            <FiFileText className="mr-1.5" />
            <span>{freeGenerationsLeft} free generation{freeGenerationsLeft !== 1 ? 's' : ''} left</span>
            {freeGenerationsLeft === 0 && (
              <button 
                onClick={() => setShowProAlert(true)}
                className="ml-2 text-blue-500 hover:text-blue-600 font-medium"
              >
                Upgrade to Pro
              </button>
            )}
          </div>
        )}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
        {/* Content Generation Form */}
        <div className="lg:col-span-2 order-2 lg:order-1">
          <div className="sticky top-6 space-y-6">
            {/* Prompt Input */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
              <h2 className="text-xl font-medium mb-4">Create Content</h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1 dark:text-gray-300">What do you want to write?</label>
                  <textarea
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="Describe what you want to write about..."
                    className="w-full p-3 border rounded-lg shadow-sm h-24 dark:bg-gray-700 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    disabled={isGenerating}
                  />
                </div>

                {/* Content Settings Toggle */}
                <div>
                  <div className="flex justify-between items-center mb-1">
                    <label className="text-sm font-medium dark:text-gray-300">Content Settings</label>
                    <button 
                      onClick={() => setShowContentSettings(!showContentSettings)}
                      className="text-sm text-blue-600 dark:text-blue-400 flex items-center"
                      disabled={isGenerating}
                    >
                      <FiSliders className="mr-1" size={14} />
                      {showContentSettings ? 'Hide' : 'Show'}
                    </button>
                  </div>

                  {/* Content Settings */}
                  {showContentSettings && (
                    <motion.div 
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      className="space-y-3 mt-2 pt-2 border-t dark:border-gray-700"
                    >
                      <div>
                        <label className="block text-xs font-medium mb-1 dark:text-gray-400">Content Type</label>
                        <select
                          value={contentType}
                          onChange={(e) => setContentType(e.target.value)}
                          className="w-full p-2 text-sm border rounded-md dark:bg-gray-700 dark:border-gray-600"
                          disabled={isGenerating}
                        >
                          {contentTypes.map(type => (
                            <option key={type.id} value={type.id}>{type.name}</option>
                          ))}
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium mb-1 dark:text-gray-400">Tone</label>
                        <select
                          value={tone}
                          onChange={(e) => setTone(e.target.value)}
                          className="w-full p-2 text-sm border rounded-md dark:bg-gray-700 dark:border-gray-600"
                          disabled={isGenerating}
                        >
                          {toneOptions.map(option => (
                            <option key={option.id} value={option.id}>{option.name}</option>
                          ))}
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium mb-1 dark:text-gray-400">Length</label>
                        <select
                          value={contentLength}
                          onChange={(e) => setContentLength(e.target.value)}
                          className="w-full p-2 text-sm border rounded-md dark:bg-gray-700 dark:border-gray-600"
                          disabled={isGenerating}
                        >
                          {lengthOptions.map(option => (
                            <option key={option.id} value={option.id}>{option.name}</option>
                          ))}
                        </select>
                      </div>
                    </motion.div>
                  )}
                </div>
                
                <div>
                  <button
                    onClick={handleGenerateContent}
                    disabled={!prompt.trim() || isGenerating}
                    className={`w-full py-3 rounded-lg font-medium flex items-center justify-center ${
                      !prompt.trim() || isGenerating
                        ? 'bg-gray-300 text-gray-500 dark:bg-gray-700 dark:text-gray-400'
                        : 'bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 text-white hover:opacity-90'
                    } transition`}
                  >
                    {isGenerating ? (
                      <>
                        <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Generating...
                      </>
                    ) : (
                      <>
                        <FiZap className="mr-2" />
                        Generate Content
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
            
            {/* Recent Prompts */}
            {history.length > 0 && (
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                <h3 className="font-medium mb-3">Recent Prompts</h3>
                <div className="space-y-2">
                  {history.map((item, index) => (
                    <button
                      key={index}
                      onClick={() => setPrompt(item)}
                      className="w-full text-left p-2 rounded-md text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-start"
                    >
                      <FiMessageSquare className="text-gray-400 mt-0.5 mr-2 flex-shrink-0" />
                      <span className="line-clamp-1">{item}</span>
                    </button>
                  ))}
                </div>
              </div>
            )}
            
            {/* Saved Content */}
            {savedContents.length > 0 && (
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                <h3 className="font-medium mb-3">Saved Content</h3>
                <div className="space-y-2">
                  {savedContents.map((item) => (
                    <div 
                      key={item.id}
                      className="flex justify-between items-center p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
                    >
                      <button
                        className="text-left text-sm flex items-center flex-1 truncate mr-2"
                        onClick={() => handleLoadSaved(item.content)}
                      >
                        <FiBookOpen className="text-gray-400 mr-2 flex-shrink-0" />
                        <span className="truncate">{item.title}</span>
                      </button>
                      <button
                        onClick={() => handleDeleteSaved(item.id)}
                        className="text-gray-400 hover:text-red-500 p-1"
                        title="Delete"
                      >
                        <FiTrash size={14} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
        
        {/* Content Output */}
        <div className="lg:col-span-3 order-1 lg:order-2">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
            {/* Content Header */}
            <div className="bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4 flex justify-between items-center">
              <div className="flex items-center">
                <FiFileText className="text-gray-500 dark:text-gray-400 mr-2" />
                <h2 className="font-medium">{generatedContent ? getContentTitle() : 'Generated Content'}</h2>
              </div>
              
              <div className="flex space-x-1">
                {generatedContent && (
                  <>
                    <button
                      onClick={handleCopyContent}
                      className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                      title="Copy to clipboard"
                    >
                      <FiCopy />
                    </button>
                    <button
                      onClick={handleDownloadContent}
                      className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                      title="Download as Markdown"
                    >
                      <FiDownload />
                    </button>
                    <button
                      onClick={() => setShowTitleEdit(!showTitleEdit)}
                      className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                      title="Save content"
                    >
                      <FiSave />
                    </button>
                  </>
                )}
              </div>
            </div>
            
            {/* Save Dialog */}
            {showTitleEdit && (
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 border-b border-blue-200 dark:border-blue-800">
                <div className="flex items-center">
                  <input
                    type="text"
                    value={editingTitle}
                    onChange={(e) => setEditingTitle(e.target.value)}
                    placeholder="Enter a title for your saved content"
                    className="flex-1 p-2 border rounded-md mr-2 dark:bg-gray-700 dark:border-gray-600"
                  />
                  <button
                    onClick={handleSaveContent}
                    className="p-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                  >
                    Save
                  </button>
                  <button
                    onClick={() => setShowTitleEdit(false)}
                    className="p-2 ml-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                  >
                    <FiX />
                  </button>
                </div>
              </div>
            )}
            
            {/* Content Area */}
            <div className="p-6">
              {generatedContent ? (
                <textarea
                  ref={contentRef}
                  value={generatedContent}
                  onChange={handleContentChange}
                  className="w-full min-h-[600px] p-0 border-0 focus:ring-0 dark:bg-gray-800 dark:text-gray-200 font-mono text-sm resize-none"
                  spellCheck="false"
                />
              ) : (
                <div className="flex flex-col items-center justify-center text-center py-16">
                  <div className="h-16 w-16 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mb-4">
                    <FiEdit className="h-8 w-8 text-gray-400 dark:text-gray-500" />
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">No Content Generated Yet</h3>
                  <p className="text-gray-500 dark:text-gray-400 max-w-md mb-6">
                    Enter your prompt and adjust content settings to generate text for blogs, emails, social media posts, and more.
                  </p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-w-xl">
                    <div onClick={() => setPrompt('Write a blog post about sustainable living practices')} className="cursor-pointer p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 text-left">
                      <div className="flex items-center text-blue-500 dark:text-blue-400 mb-1 text-sm font-medium">
                        <FiPlus className="mr-1.5" />
                        <span>Blog Post</span>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-300">Write about sustainable living practices</p>
                    </div>
                    
                    <div onClick={() => setPrompt('Create a product description for a new fitness watch')} className="cursor-pointer p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 text-left">
                      <div className="flex items-center text-green-500 dark:text-green-400 mb-1 text-sm font-medium">
                        <FiPlus className="mr-1.5" />
                        <span>Product Description</span>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-300">Create a description for a fitness watch</p>
                    </div>
                    
                    <div onClick={() => setPrompt('Draft an email announcing a company event')} className="cursor-pointer p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 text-left">
                      <div className="flex items-center text-purple-500 dark:text-purple-400 mb-1 text-sm font-medium">
                        <FiPlus className="mr-1.5" />
                        <span>Email</span>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-300">Draft an email announcing a company event</p>
                    </div>
                    
                    <div onClick={() => setPrompt('Write a social media post about a new technology launch')} className="cursor-pointer p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 text-left">
                      <div className="flex items-center text-yellow-500 dark:text-yellow-400 mb-1 text-sm font-medium">
                        <FiPlus className="mr-1.5" />
                        <span>Social Media</span>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-300">Write about a new technology launch</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContentWriterPage; 