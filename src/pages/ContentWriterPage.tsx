import React, { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import { 
  FiEdit, 
  FiCopy, 
  FiDownload, 
  FiTrash, 
  FiPlus, 
  FiSave,
  FiZap,
  FiList,
  FiBookOpen,
  FiMessageSquare,
  FiFileText,
  FiSliders,
  FiRotateCw,
  FiX
} from 'react-icons/fi';

const ContentWriterPage: React.FC = () => {
  const [prompt, setPrompt] = useState('');
  const [generatedContent, setGeneratedContent] = useState('');
  const [tone, setTone] = useState('professional');
  const [contentType, setContentType] = useState('blog');
  const [contentLength, setContentLength] = useState('medium');
  const [isGenerating, setIsGenerating] = useState(false);
  const [savedContents, setSavedContents] = useState<{id: string, title: string, content: string}[]>([]);
  const [editingTitle, setEditingTitle] = useState('');
  const [showTitleEdit, setShowTitleEdit] = useState(false);
  const [showContentSettings, setShowContentSettings] = useState(false);
  const [history, setHistory] = useState<string[]>([
    'Write a blog post about sustainable living practices',
    'Create a product description for a new fitness watch',
    'Draft an email announcing a company event',
    'Write a social media post about a new technology launch'
  ]);

  const contentRef = useRef<HTMLTextAreaElement>(null);

  // Content types
  const contentTypes = [
    { id: 'blog', name: 'Blog Post' },
    { id: 'email', name: 'Email' },
    { id: 'social', name: 'Social Media Post' },
    { id: 'product', name: 'Product Description' },
    { id: 'academic', name: 'Academic Paper' },
    { id: 'creative', name: 'Creative Writing' },
    { id: 'press', name: 'Press Release' },
    { id: 'ad', name: 'Advertisement' },
  ];

  // Tone options
  const toneOptions = [
    { id: 'professional', name: 'Professional' },
    { id: 'casual', name: 'Casual' },
    { id: 'formal', name: 'Formal' },
    { id: 'friendly', name: 'Friendly' },
    { id: 'humorous', name: 'Humorous' },
    { id: 'persuasive', name: 'Persuasive' },
    { id: 'enthusiastic', name: 'Enthusiastic' },
    { id: 'instructional', name: 'Instructional' },
  ];

  // Length options
  const lengthOptions = [
    { id: 'short', name: 'Short (100-200 words)' },
    { id: 'medium', name: 'Medium (300-500 words)' },
    { id: 'long', name: 'Long (600-1000 words)' },
    { id: 'detailed', name: 'Detailed (1000+ words)' },
  ];

  const handleGenerateContent = async () => {
    if (!prompt.trim()) return;
    
    setIsGenerating(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      // Example result (in a real app, this would come from an API)
      const result = `# ${getContentTitle()}

${getContentBody()}

${getContentConclusion()}`;
      
      setGeneratedContent(result);
      
      // Add to history if not already there
      if (!history.includes(prompt)) {
        setHistory(prev => [prompt, ...prev.slice(0, 3)]);
      }
    } catch (error) {
      console.error('Error generating content:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const getContentTitle = () => {
    // This would normally be generated by AI
    const typeLabels: Record<string, string> = {
      'blog': 'Blog Post:',
      'email': 'Email:',
      'social': 'Social Media Post:',
      'product': 'Product Description:',
      'academic': 'Academic Paper:',
      'creative': 'Creative Writing Piece:',
      'press': 'Press Release:',
      'ad': 'Advertisement:'
    };
    
    const typeLabel = typeLabels[contentType] || 'Content';
    
    let title = '';
    if (prompt.length > 30) {
      title = `${typeLabel} ${prompt.substring(0, 30)}...`;
    } else {
      title = `${typeLabel} ${prompt}`;
    }
    
    return title;
  };

  const getContentBody = () => {
    // This would normally be generated by AI
    // Create a placeholder based on content type, tone, and length
    const wordCounts: Record<string, number> = {
      'short': 150,
      'medium': 400,
      'long': 800,
      'detailed': 1200
    };
    
    const wordCount = wordCounts[contentLength] || 400;
    
    // Generate lorem ipsum style content with appropriate word count and paragraphs
    let paragraphs = Math.ceil(wordCount / 100); // One paragraph per 100 words
    paragraphs = Math.max(2, paragraphs); // At least 2 paragraphs
    
    const result = [];
    
    for (let i = 0; i < paragraphs; i++) {
      const paraLength = Math.floor(wordCount / paragraphs);
      let paragraph = '';
      
      // Start paragraph with different openings based on tone
      switch (tone) {
        case 'professional':
          paragraph += "In a professional context, it's important to consider the impact of ";
          break;
        case 'casual':
          paragraph += "Hey there! Let's talk about ";
          break;
        case 'formal':
          paragraph += "It is hereby proposed that the consideration of ";
          break;
        case 'friendly':
          paragraph += "I'm excited to share with you some thoughts on ";
          break;
        case 'humorous':
          paragraph += "You won't believe what happened when I tried to ";
          break;
        case 'persuasive':
          paragraph += "You absolutely need to understand why ";
          break;
        case 'enthusiastic':
          paragraph += "I'm thrilled to announce the amazing ";
          break;
        case 'instructional':
          paragraph += "Follow these steps to master ";
          break;
        default:
          paragraph += "Let's explore the topic of ";
      }
      
      paragraph += prompt.toLowerCase() + ". ";
      
      // Add some filler content
      const fillerText = "This generated content provides valuable insights related to the topic. It covers key aspects and offers meaningful analysis. The content is tailored to meet the specified parameters and help achieve the intended goals.";
      paragraph += fillerText.repeat(Math.ceil((paraLength - 20) / fillerText.length));
      
      result.push(paragraph);
    }
    
    return result.join("\n\n");
  };

  const getContentConclusion = () => {
    // This would normally be generated by AI
    const conclusions: Record<string, string> = {
      'professional': "In conclusion, this analysis provides a foundation for further discussion about " + prompt + ".",
      'casual': "So there you have it! That's my take on " + prompt + ". What do you think?",
      'formal': "Therefore, it is concluded that the aforementioned aspects of " + prompt + " warrant thorough consideration.",
      'friendly': "Thanks for reading my thoughts on " + prompt + ". I'd love to hear your perspective!",
      'humorous': "And that's how I ended up with a story about " + prompt + " that I'll never live down!",
      'persuasive': "Don't wait any longer. The time to act on " + prompt + " is now.",
      'enthusiastic': "I can't wait to see what amazing things will happen with " + prompt + " next!",
      'instructional': "By following these steps, you'll master " + prompt + " in no time.",
    };
    
    return conclusions[tone] || "In summary, these insights about " + prompt + " provide valuable perspective.";
  };

  const handleCopyContent = () => {
    navigator.clipboard.writeText(generatedContent);
    // Could add a toast notification here
  };

  const handleDownloadContent = () => {
    const element = document.createElement('a');
    const file = new Blob([generatedContent], {type: 'text/markdown'});
    element.href = URL.createObjectURL(file);
    element.download = `${getContentTitle()}.md`.replace(/[^a-z0-9\s-]/gi, '').replace(/\s+/g, '-').toLowerCase();
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const handleSaveContent = () => {
    const title = editingTitle || getContentTitle();
    
    setSavedContents(prev => [
      ...prev,
      {
        id: Date.now().toString(),
        title,
        content: generatedContent
      }
    ]);
    
    setShowTitleEdit(false);
    setEditingTitle('');
  };

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setGeneratedContent(e.target.value);
  };

  const handleDeleteSaved = (id: string) => {
    setSavedContents(prev => prev.filter(item => item.id !== id));
  };

  const handleLoadSaved = (content: string) => {
    setGeneratedContent(content);
  };

  return (
    <div className="container mx-auto max-w-6xl p-4 py-8">
      <div className="mb-8">
        <motion.h1 
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-3xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500"
        >
          AI Content Writer
        </motion.h1>
        <motion.p 
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="text-gray-500 dark:text-gray-400"
        >
          Generate high-quality written content for any purpose
        </motion.p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Left Column - Content Generation Controls */}
        <div className="space-y-6">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
            <h2 className="text-lg font-medium mb-4 flex items-center">
              <FiEdit className="mr-2 text-blue-500" />
              Content Instructions
            </h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1 dark:text-gray-300">What do you want to write about?</label>
                <textarea
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder="Describe what you want to write about..."
                  className="w-full p-3 border rounded-lg shadow-sm h-32 dark:bg-gray-700 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  disabled={isGenerating}
                />
              </div>

              <div>
                <div className="flex justify-between items-center mb-1">
                  <label className="text-sm font-medium dark:text-gray-300">Content Settings</label>
                  <button 
                    onClick={() => setShowContentSettings(!showContentSettings)}
                    className="text-sm text-blue-600 dark:text-blue-400 flex items-center"
                  >
                    <FiSliders className="mr-1" size={14} />
                    {showContentSettings ? 'Hide' : 'Show'}
                  </button>
                </div>
                
                {showContentSettings && (
                  <motion.div 
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="space-y-3"
                  >
                    <div>
                      <label className="block text-xs font-medium mb-1 dark:text-gray-400">Content Type</label>
                      <select 
                        value={contentType}
                        onChange={(e) => setContentType(e.target.value)}
                        className="w-full p-2 text-sm border rounded-md dark:bg-gray-700 dark:border-gray-600"
                        disabled={isGenerating}
                      >
                        {contentTypes.map(type => (
                          <option key={type.id} value={type.id}>{type.name}</option>
                        ))}
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium mb-1 dark:text-gray-400">Tone</label>
                      <select 
                        value={tone}
                        onChange={(e) => setTone(e.target.value)}
                        className="w-full p-2 text-sm border rounded-md dark:bg-gray-700 dark:border-gray-600"
                        disabled={isGenerating}
                      >
                        {toneOptions.map(option => (
                          <option key={option.id} value={option.id}>{option.name}</option>
                        ))}
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium mb-1 dark:text-gray-400">Length</label>
                      <select 
                        value={contentLength}
                        onChange={(e) => setContentLength(e.target.value)}
                        className="w-full p-2 text-sm border rounded-md dark:bg-gray-700 dark:border-gray-600"
                        disabled={isGenerating}
                      >
                        {lengthOptions.map(option => (
                          <option key={option.id} value={option.id}>{option.name}</option>
                        ))}
                      </select>
                    </div>
                  </motion.div>
                )}
              </div>
              
              <button
                onClick={handleGenerateContent}
                disabled={!prompt.trim() || isGenerating}
                className={`w-full py-3 rounded-lg font-medium flex items-center justify-center ${
                  !prompt.trim() || isGenerating
                    ? 'bg-gray-300 text-gray-500 dark:bg-gray-700 dark:text-gray-400'
                    : 'bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 text-white hover:opacity-90'
                } transition`}
              >
                {isGenerating ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Generating
                  </>
                ) : (
                  <>
                    <FiZap className="mr-2" />
                    Generate Content
                  </>
                )}
              </button>
            </div>
          </div>
          
          {/* Previous Prompts */}
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
            <h2 className="text-lg font-medium mb-4 flex items-center">
              <FiList className="mr-2 text-blue-500" />
              Previous Prompts
            </h2>
            
            {history.length > 0 ? (
              <div className="space-y-2">
                {history.map((item, index) => (
                  <button
                    key={index}
                    onClick={() => setPrompt(item)}
                    disabled={isGenerating}
                    className="w-full text-left p-3 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 text-sm flex items-start"
                  >
                    <FiMessageSquare className="mr-2 mt-0.5 text-blue-500 flex-shrink-0" />
                    <span className="line-clamp-2">{item}</span>
                  </button>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 dark:text-gray-400 text-sm text-center py-4">
                Your prompt history will appear here
              </p>
            )}
          </div>
          
          {/* Saved Content */}
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
            <h2 className="text-lg font-medium mb-4 flex items-center">
              <FiBookOpen className="mr-2 text-blue-500" />
              Saved Content
            </h2>
            
            {savedContents.length > 0 ? (
              <div className="space-y-2">
                {savedContents.map((item) => (
                  <div
                    key={item.id}
                    className="p-3 border border-gray-200 dark:border-gray-700 rounded-lg"
                  >
                    <div className="flex justify-between items-center mb-1">
                      <h3 className="font-medium text-sm truncate">{item.title}</h3>
                      <div className="flex space-x-1">
                        <button
                          onClick={() => handleLoadSaved(item.content)}
                          className="p-1 text-gray-500 hover:text-blue-500 dark:text-gray-400 dark:hover:text-blue-400"
                          title="Load content"
                        >
                          <FiRotateCw size={14} />
                        </button>
                        <button
                          onClick={() => handleDeleteSaved(item.id)}
                          className="p-1 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-400"
                          title="Delete"
                        >
                          <FiTrash size={14} />
                        </button>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500 dark:text-gray-400 line-clamp-2">
                      {item.content.substring(0, 100)}...
                    </p>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 dark:text-gray-400 text-sm text-center py-4">
                Save your content for later use
              </p>
            )}
          </div>
        </div>
        
        {/* Right Column - Generated Content */}
        <div className="lg:col-span-2">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 h-full flex flex-col">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-medium flex items-center">
                <FiFileText className="mr-2 text-blue-500" />
                Generated Content
              </h2>
              
              <div className="flex space-x-2">
                {generatedContent && (
                  <>
                    <button
                      onClick={handleCopyContent}
                      className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                      title="Copy to clipboard"
                    >
                      <FiCopy size={18} />
                    </button>
                    <button
                      onClick={handleDownloadContent}
                      className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                      title="Download as markdown"
                    >
                      <FiDownload size={18} />
                    </button>
                    <button
                      onClick={() => setShowTitleEdit(true)}
                      className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                      title="Save content"
                    >
                      <FiSave size={18} />
                    </button>
                  </>
                )}
              </div>
            </div>
            
            {showTitleEdit && (
              <div className="mb-4 flex items-center space-x-2">
                <input
                  type="text"
                  value={editingTitle}
                  onChange={(e) => setEditingTitle(e.target.value)}
                  placeholder="Enter title for saving"
                  className="flex-1 p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
                />
                <button
                  onClick={handleSaveContent}
                  className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600"
                >
                  <FiSave size={18} />
                </button>
                <button
                  onClick={() => setShowTitleEdit(false)}
                  className="bg-gray-300 dark:bg-gray-700 p-2 rounded-md hover:bg-gray-400 dark:hover:bg-gray-600"
                >
                  <FiX size={18} />
                </button>
              </div>
            )}
            
            {generatedContent ? (
              <textarea
                ref={contentRef}
                value={generatedContent}
                onChange={handleContentChange}
                className="w-full flex-1 p-4 border rounded-lg shadow-inner bg-gray-50 dark:bg-gray-900 dark:border-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm resize-none"
              />
            ) : (
              <div className="flex-1 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 flex flex-col items-center justify-center text-center p-6">
                <FiFileText className="w-12 h-12 text-gray-400 dark:text-gray-600 mb-4" />
                <h3 className="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">Your content will appear here</h3>
                <p className="text-gray-500 dark:text-gray-400 max-w-md mb-6">
                  Enter a prompt and click "Generate Content" to create AI-powered content
                </p>
                <div className="grid grid-cols-1 gap-4 max-w-md mx-auto text-left">
                  <div className="p-3 bg-blue-50 dark:bg-blue-900/30 rounded-lg text-gray-700 dark:text-gray-300 text-sm">
                    <p className="font-medium mb-1">Tips for better results:</p>
                    <ul className="list-disc list-inside space-y-1 text-xs">
                      <li>Be specific about the topic and purpose</li>
                      <li>Mention your target audience</li>
                      <li>Specify the tone and style you prefer</li>
                      <li>Include key points you want covered</li>
                    </ul>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContentWriterPage; 